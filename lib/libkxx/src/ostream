#ifndef STD_OSTREAM_
# define STD_OSTREAM_

# include <ios>
# include <streambuf>
# include <iterator>

namespace std
{
   // Class for output streams
    class ostream : public ios
    {
        // types
        public:
           class sentry;

        // methods
        public:
            // constructor
            explicit ostream();
            explicit ostream(streambuf* sb);
            // destructor
            virtual ~ostream();
            // setter
            void set_streambuf(streambuf* sb);
            // formatted output
            ostream& operator<<(streambuf* sb);
            ostream& operator<<(ostream& (*pf)(ostream&));
            ostream& operator<<(ios& (*pf)(ios&));
            ostream& operator<<(ios_base& (*pf)(ios_base&));
            ostream& operator<<(bool val);
            ostream& operator<<(short val);
            ostream& operator<<(unsigned short val);
            ostream& operator<<(int val);
            ostream& operator<<(unsigned int val);
            ostream& operator<<(long val);
            ostream& operator<<(unsigned long val);
            ostream& operator<<(float val);
            ostream& operator<<(double val);
            ostream& operator<<(long double val);
            ostream& operator<<(const void* val);
            // unformatted output
            ostream& put(char c);
            ostream& write(const char* s, streamsize n);
            // positioning
            streampos tellp();
            ostream& seekp(streampos pos);
            ostream& seekp(streamoff off, ios_base::seekdir dir);
            // synchronization
            ostream& flush();
    };

    // Inner class for prefix/suffix operations
    class ostream::sentry
    {
        // methods
        public:
            // constructor
            explicit sentry(ostream& os);
            // destructor
            ~sentry();
            // operator overload
            operator bool() const;
       
        // attributes
        private:
            bool        ok_;
            ostream&    os_;
    };

    // Global functions for ostream operator overloading
    ostream& operator<<(ostream& out, char c);
    ostream& operator<<(ostream& out, signed char c);
    ostream& operator<<(ostream& out, unsigned char c);
    ostream& operator<<(ostream& out, const char* s);
    ostream& operator<<(ostream& out, const signed char* s);
    ostream& operator<<(ostream& out, const unsigned char* s);
    
    // Class for iterators on stream output buffers
    class ostreambuf_iterator :
        public iterator<output_iterator_tag, void, void, void, void>
    {
        // methods
        public:
            ostreambuf_iterator(ostream& s);
            ostreambuf_iterator(streambuf* s);
            ostreambuf_iterator& operator=(char c);
            ostreambuf_iterator& operator*();
            ostreambuf_iterator& operator++();
            ostreambuf_iterator& operator++(int);
            bool failed() const;

        // attributes
        private:
            streambuf*  buffer_;
            char        last_;
    };

    // Class used for formatting numeric values
    class num_put
    {
        // methods
        public:
            // constructor
            explicit num_put(long refs = 0);
            // destructor
            virtual ~num_put();
            // put function for each integer type
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, bool val) const;
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, long val) const;
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, unsigned long val) const;
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, double val) const;
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, long double val) const;
            ostreambuf_iterator put(ostreambuf_iterator out, ios_base& str, char fill, const void* val) const;
         
         protected:
            // polymorphic function for redefining the behaviour of each put overload
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, bool val) const;
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, long val) const;
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, unsigned long val) const;
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, double val) const;
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, long double val) const;
            virtual ostreambuf_iterator do_put (ostreambuf_iterator out, ios_base& str, char fill, const void* val) const;
    };
}

# include <ostream.hxx>

#endif /* !STD_OSTREAM_ */
